--[[
    Edit of Bullet Time mod to trigger automatically and create fallout style VATS zoom
    Original Author: exDeMODER
    https://www.moddb.com/members/exDeMODER

	Original editor: pitAlex
    https://www.moddb.com/mods/stalker-anomaly/addons/bullet-time-enhanced

    Original editor #2: Stalker_Boss
    https://www.moddb.com/mods/stalker-anomaly/addons/bullet-time-boss-edition-mcm-capatible

	Edit by: sunn
    10/01/2024
]]
-- Libraries
local lookup = short_range_blood_lookup.lookup()

-- On update globals
local update_trigger = 0
local update_delay = 2

-- Sound object
local slowmo_snd = nil

-- Screen effects indexes
local screenfx = {
    blink = {
        id = 2004,
        ppe = "blink.ppe",
        cycle = false
    },
    gravi = {
        id = 1996,
        ppe = "gravi.ppe",
        cycle = true
    },
    brighten = {
        id = 1995,
        ppe = "brighten.ppe",
        cycle = true
    },
    contrast = {
        id = 1994,
        ppe = "contrast.ppe",
        cycle = true
    },
    psychic = {
        id = 1993,
        ppe = "psychic.ppe",
        cycle = true
    },
    bloody = {
        id = 2666,
        ppe = "bloody.ppe",
        cycle = true
    }
}
-- Keep track of events
local slowmo_flag = 0
local zoom_flag = 0
local reset_counter = 0
local reset_counter_timer = 0
local trigger_delay = 100
local trigger_timer = 0

local time_factor = 1;
local focus_coef = 0;
local current_slowmo_event = 0


-----------------------------------------------------------------------------------------------
-- TIME EVENTS
-----------------------------------------------------------------------------------------------
function reset_camera(event_id)
    level.remove_cam_custom_position_direction()
    level.remove_pp_effector(screenfx.bloody.id)
    return true
end

function end_slowmo_zoom(event_id)
    if lookup:setting("bullettime/enable_screenfx") then
        level.add_pp_effector(screenfx.blink.ppe, screenfx.blink.id, screenfx.blink.cycle)
        level.set_pp_effector_factor(screenfx.blink.id, 0.1)
    end

    reset_camera(event_id)

    if lookup:setting("killcam/smooth_end") then
        clean_callback("actor_on_update", _slowmo_zoom_on_end)
    elseif lookup:setting("bullettime/enable") then
        set_time_factor(lookup:setting("bullettime/time_speed"))
        slowmo_start()
    else
        set_time_factor(1)
    end
    pr("end zoom")

    return true
end

function end_slowmo(event_id)
    if lookup:setting("bullettime/enable_screenfx") then
        level.add_pp_effector(screenfx.blink.ppe, screenfx.blink.id, screenfx.blink.cycle)
        level.set_pp_effector_factor(screenfx.blink.id, 0.1)
    end
    cleanup_bullettime_screenfx()
    play_bullettime_sound("slow-mo\\slowmo_off")

    if lookup:setting("bullettime/smooth_end") then
        clean_callback("actor_on_update", _slowmo_on_end)
    else
        set_time_factor(1)
        remove_callbacks()
    end
    pr("end slowmo")
    return true
end

-----------------------------------------------------------------------------------------------
-- INITIAL CALLBACK
-----------------------------------------------------------------------------------------------
function _on_before_hit_after_calcs(s_hit, target, bone_id)
    if not bone_id then return end
    if not s_hit then return end
    if not target then return end
    local shooter = s_hit.draftsman
    local player = db.actor
    if target:id() == player:id() then return end
    if shooter:id() ~= player:id() then return end

    if not player:alive() then
        if (slowmo_flag == 1) then
            end_slowmo(current_slowmo_event)
        end
        return true
    end

    if not lookup:setting("bullettime/enable") and not lookup:setting("killcam/enable") then return true end
    if shooter:id() ~= player:id() then return true end

    local npc = target

    if grok_bo ~= nil then
        if npc.health > 0 then return true end
    else
        if npc.health - s_hit.power > 0 then return end
    end

    if shooter:id() ~= player:id() then return true end


    pr("about to trigger slowmo!!!")
    head_bones = lookup:get_head_bones()
    if (bone_id and head_bones[bone_id]) then
        if lookup:setting("dismemberment/enable") then return true end -- let dismemberment trigger bullet time
        trigger(target, bone_id)
    end
end

-----------------------------------------------------------------------------------------------
-- SLOWMO ZOOM CALLBACKS
-----------------------------------------------------------------------------------------------
function _slowmo_zoom_on_update()
    tg = time_global()

    if update_trigger == 0 then
        grok_delay = tg + update_delay
        update_trigger = 1
    end

    if (update_trigger == 1 and tg > grok_delay) then
        update_trigger = 0

        if not db.actor:alive() then
            end_slowmo_zoom(current_slowmo_event)
        end

        if time_factor > tonumber(lookup:setting("killcam/time_speed")) then
            set_time_factor(time_factor - lookup:setting("killcam/smooth_start_factor"))
        end
    end
end

function _slowmo_zoom_on_end()
    tg = time_global()

    if update_trigger == 0 then
        grok_delay = tg + update_delay
        update_trigger = 1
    end

    if (update_trigger == 1 and tg > grok_delay) then
        update_trigger = 0
        if (time_factor >= 1) then
            set_time_factor(1)
            remove_callbacks()
        elseif lookup:setting("bullettime/enable") and (time_factor >= lookup:setting("bullettime/time_speed")) then
            set_time_factor(lookup:setting("bullettime/time_speed"))
            slowmo_start()
        else
            set_time_factor(time_factor + lookup:setting("killcam/smooth_end_factor"))
        end
    end
    pr("zoom on end")
end

-----------------------------------------------------------------------------------------------
-- SLOWMO CALLBACKS
-----------------------------------------------------------------------------------------------
function _slowmo_on_update()
    tg = time_global()

    if update_trigger == 0 then
        grok_delay = tg + update_delay
        update_trigger = 1
    end

    if (update_trigger == 1 and tg > grok_delay) then
        update_trigger = 0

        if (not db.actor:alive()) then
            end_slowmo(current_slowmo_event)
        end

        if time_factor > lookup:setting("bullettime/time_speed") then
            set_time_factor(time_factor - lookup:setting("bullettime/smooth_start_factor"))
            focus_coef = focus_coef + 0.005;
            update_bullettime_screenfx(focus_coef)
        end
    end
end

function _slowmo_on_end()
    tg = time_global()

    if update_trigger == 0 then
        grok_delay = tg + update_delay
        update_trigger = 1
    end

    if (update_trigger == 1 and tg > grok_delay) then
        update_trigger = 0
        if (time_factor >= 1) then
            set_time_factor(1)
            remove_callbacks()
        else
            set_time_factor(time_factor + lookup:setting("bullettime/smooth_end_factor"))
        end
    end

    pr("slowmo on end")
end

-----------------------------------------------------------------------------------------------
-- NON CALLBACK FUNCTIONS
-----------------------------------------------------------------------------------------------

-- CALLBACK UTILS

function set_time_factor(tf)
    if tf >= 1 then
        slowmo_flag = 0
        zoom_flag = 0
        reset_counter = 0
        focus_coef = 0

        current_slowmo_event = current_slowmo_event + 1
    end
    time_factor = tf
    --get_console():execute("time_factor " .. tostring(tf))
    exec_console_cmd(("time_factor %s"):format(time_factor))
    --pr("timefactor: %s", tf)
end

function clean_callback(type, callback)
    remove_callbacks()
    RegisterScriptCallback(type, callback)
end

function remove_callbacks()
    UnregisterScriptCallback("actor_on_update", _slowmo_zoom_on_end)
    UnregisterScriptCallback("actor_on_update", _slowmo_on_end)
    UnregisterScriptCallback("actor_on_update", _slowmo_zoom_on_update)
    UnregisterScriptCallback("actor_on_update", _slowmo_on_update)
end

function slowmo_zoom_start(target, bone_id)
    remove_callbacks()
    move_camera(target, bone_id)
    if lookup:setting("killcam/smooth_start") then
        clean_callback("actor_on_update", _slowmo_zoom_on_update)
    else
        set_time_factor(lookup:setting("killcam/time_speed"))
    end
    CreateTimeEvent("end_slowmo_zoom_e", "end_slowmo_zoom_" .. current_slowmo_event, lookup:setting("killcam/length"),
        end_slowmo_zoom, current_slowmo_event)
    zoom_flag = 1
    slowmo_flag = 1
end

function slowmo_start()
    remove_callbacks()
    if lookup:setting("bullettime/smooth_start") then
        clean_callback("actor_on_update", _slowmo_on_update)
    else
        set_time_factor(lookup:setting("bullettime/time_speed"))
    end

    local slowmo_length = lookup:setting("bullettime/length")
    if zoom_flag ~= 0 then
        -- When we came from a killcam adjust the time accordingly
        local remaining_time = slowmo_length - lookup:setting("killcam/length")
        if remaining_time > 0.1 then slowmo_length = remaining_time end
        pr("coming from killcam with time left: %s", remaining_time)
    end
    CreateTimeEvent("end_slowmo_e", "end_slowmo_" .. current_slowmo_event, slowmo_length, end_slowmo,
        current_slowmo_event)
    slowmo_flag = 1
    reset_counter = 0
end

function play_bullettime_sound(sound)
    if lookup:setting("bullettime/enable_sounds") then
        pr("playing bullettime sound %s", sound)
        local actor = db.actor
        slowmo_snd = sound_object(sound)
        slowmo_snd:play_at_pos(actor, vector():set(0, 0, 0), 0, sound_object.s2d)
    end
end

function cleanup_bullettime_screenfx()
    for k, v in pairs(screenfx) do
        level.remove_pp_effector(v.id)
    end
end

function update_bullettime_screenfx(fc)
    if lookup:setting("bullettime/enable_screenfx") then
        if lookup:setting("bullettime/enable_screenfx_gravi") then
            level.set_pp_effector_factor(screenfx.gravi.id, 100 + (fc * 6))
        end
        if lookup:setting("bullettime/enable_screenfx_brighten") then
            level.set_pp_effector_factor(screenfx.brighten.id, 6 + (fc * 10))
        end
        if lookup:setting("bullettime/enable_screenfx_contrast") then
            level.set_pp_effector_factor(screenfx.contrast.id, 1 + fc * 2)
        end
        if lookup:setting("bullettime/enable_screenfx_psychic") then
            level.set_pp_effector_factor(screenfx.psychic.id, fc)
        end
    end
end

function add_bullettime_screenfx()
    if lookup:setting("bullettime/enable_screenfx") then
        cleanup_bullettime_screenfx()

        if lookup:setting("bullettime/enable_screenfx_gravi") then
            level.add_pp_effector(screenfx.gravi.ppe, screenfx.gravi.id, screenfx.gravi.cycle)
        end
        if lookup:setting("bullettime/enable_screenfx_brighten") then
            level.add_pp_effector(screenfx.brighten.ppe, screenfx.brighten.id, screenfx.brighten.cycle)
        end
        if lookup:setting("bullettime/enable_screenfx_contrast") then
            level.add_pp_effector(screenfx.contrast.ppe, screenfx.contrast.id, screenfx.contrast.cycle)
        end
        if lookup:setting("bullettime/enable_screenfx_psychic") then
            level.add_pp_effector(screenfx.psychic.ppe, screenfx.psychic.id, screenfx.psychic.cycle)
        end
    end
end

function trigger(target, bone_id)
    tg = time_global()
    if tg > trigger_timer + trigger_delay then
        trigger_timer = tg

        if target and lookup:death_log(target) then return true end

        local pos1 = db.actor:position()
        local pos2 = target:position()
        local distance_to_target = pos1:distance_to(pos2)
        pr("distance %s", distance_to_target)

        local function __slowmo_zoom_start_conditional()
            if not bone_id then return false end
            if not lookup:setting("killcam/enable") then return false end
            if lookup:setting("killcam/trigger_range") > distance_to_target then return false end
            if lookup:setting("killcam/safemode_distance") > 1 and not actor_is_safe(lookup:setting("killcam/safemode_distance")) then
                return false
            end
            return true
        end

        local function __bullettime_start_conditional()
            if not lookup:setting("bullettime/enable") then return false end
            if lookup:setting("bullettime/trigger_chance") * 100 < math.random(100) then return false end
            return true
        end

        if slowmo_flag == 0 then
            play_bullettime_sound("slow-mo\\slowmo_on")
            add_bullettime_screenfx()

            pr("slowmo activate")
            if __slowmo_zoom_start_conditional() and lookup:setting("killcam/gamify") == 0 then
                pr("zoom")
                slowmo_zoom_start(target, bone_id)
            elseif __bullettime_start_conditional() then
                pr("no zoom")
                slowmo_start()
            end
        elseif slowmo_flag == 1 then
            tg = time_global()
            if tg > reset_counter_timer + trigger_delay then
                reset_counter = reset_counter + 1
                reset_counter_timer = tg
                pr("resetting time event: %s", reset_counter)
            end
            if __slowmo_zoom_start_conditional() and (lookup:setting("killcam/gamify") == 0 or (reset_counter >= lookup:setting("killcam/gamify"))) then
                slowmo_zoom_start(target, bone_id)
            else
                ResetTimeEvent("end_slowmo_e", "end_slowmo_" .. current_slowmo_event, lookup:setting("bullettime/length"))
            end
        end
        return true
    end
end

function actor_is_safe(radius)
    pr("testing nearby enemies")
    local count = 0
    local pos = db.actor:position()
    for id, v in pairs(xr_combat_ignore.fighting_with_actor_npcs) do
        local npc = db.storage[id] and db.storage[id].object
        if npc and npc:alive() and (pos:distance_to(npc:position()) <= radius) then
            pr("npc in safemode radius: %s", id)
            count = count + 1
        end
    end
    pr("enemies in combat within radius of %s: %s", radius, count)
    return count == 0
end

-- camera debug stuff
local part_center = particles_object("_samples_particles_\\flash_light")
local part_outside = {}

function move_camera(target, bone_id)
    if not target then return end
    if not bone_id then return end
    local bone_name = bone_id and target:bone_name(bone_id)
    if not bone_name then return end
    local pos = target:bone_position(bone_name)
    if not pos then return end

    local radius = lookup:setting("killcam/distance")

    local safe_cam_positions = lookup:get_safe_camera_positions(target, bone_id, pos, radius)
    local safe_cam_directions = lookup:get_safe_camera_directions(target, bone_id, pos, radius)

    if not safe_cam_positions or #safe_cam_positions == 0 then return end
    if not safe_cam_directions or #safe_cam_directions == 0 then return end

    local cam_pos = nil
    local cam_dir = nil
    local picked_camera = math.random(1, #safe_cam_positions)
    pr("picked camera position %s from %s options", picked_camera, #safe_cam_positions)
    cam_pos = safe_cam_positions[picked_camera]
    cam_dir = safe_cam_directions[picked_camera]

    if not cam_dir or not cam_pos then return end

    local cam_dir_hpr = vector():set(cam_dir:getH(), cam_dir:getP(), 0)

    level.set_cam_custom_position_direction(cam_pos, cam_dir_hpr, 1)
    level.remove_pp_effector(screenfx.bloody.id)

    if lookup:setting("bullettime/enable_screenfx") then
        level.add_pp_effector(screenfx.bloody.ppe, screenfx.bloody.id, screenfx.bloody.cycle)
        level.set_pp_effector_factor(screenfx.bloody.id, 0.08)
    end
end

-----------------------------------------------------------------------------------------------
-- UTILS
-----------------------------------------------------------------------------------------------
-- clean out on loading
local clear_event_counter = 0
function save_state(m_data)
    if clear_event_counter == 1 then
        m_data.current_slowmo_event = 0
    end
end

function load_state(m_data)
    if m_data.current_slowmo_event then
        clear_event_counter = 1
        m_data.current_slowmo_event = 0
    end
end

function pr(...)
    if not lookup:setting("bullettime/enable_debug") then return end
    printf(...)
end

function clear_events()
    reset_camera()
    remove_callbacks()
    set_time_factor(1)
end

function on_game_start()
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)

    RegisterScriptCallback("actor_on_first_update", clear_events)
    RegisterScriptCallback("actor_on_net_destroy", clear_events)

    RegisterScriptCallback("on_before_hit_after_calcs", _on_before_hit_after_calcs)
    --RegisterScriptCallback("monster_on_death_callback", npc_on_death)
end
