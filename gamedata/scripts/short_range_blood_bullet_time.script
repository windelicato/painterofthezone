--[[  
    Edit of Long Range Blood Decals mod to display even more blood wallmarks
    Original Author: exDeMODER
    https://www.moddb.com/members/exDeMODER

	Original editor: pitAlex
    https://www.moddb.com/mods/stalker-anomaly/addons/bullet-time-enhanced

    Original editor #2: Stalker_Boss
    https://www.moddb.com/mods/stalker-anomaly/addons/bullet-time-boss-edition-mcm-capatible

	Edit by: sunn
    10/01/2024
]]
local update_trigger = 0
local update_delay = 2

local drain_rate_base = -0.0012 -- stamina drain rate
local drain_rate_coef = 1;

local slowmo_flag = 0
local time_factor = 1;
local time_speed = 0.4;

local run_coef = 0;
local coef_on = 0;
local focus_coef = 0;

local enable_screenfx = true;
local enable_dodge = true;
local enable_drain = true;
local enable_sounds = true;

local current_slowmo_event = 0

local lookup = short_range_blood_lookup.lookup()

local function load_settings()
    enable_screenfx = lookup:setting("bullettime/enable_screenfx")
    enable_sounds = lookup:setting("bullettime/enable_sounds")
    enable_dodge = false
    enable_drain = lookup:setting("bullettime/enable_dodge")
    drain_rate_coef = lookup:setting("bullettime/drain_rate_coef")
    time_speed = lookup:setting("bullettime/time_speed")
end

function end_slowmo(event_id)
    if enable_sounds then
        local slowmo_snd_off = sound_object("slow-mo\\slowmo_off")
        slowmo_snd_off:play_at_pos(actor, vector():set(0, 0, 0), 0, sound_object.s2d)
    end
    if enable_screenfx then
        level.add_pp_effector("blink.ppe", 2004, false)
        level.set_pp_effector_factor(2004, 0.08)
    end
    -- ensure effects are removed in case user disabled them while slowmo was active
    level.remove_pp_effector(1996)
    level.remove_pp_effector(1995)
    level.remove_pp_effector(1994)
    level.remove_pp_effector(1993)

    get_console():execute("time_factor 1")
    time_factor = 1
    slowmo_flag = 0
    coef_on = 0
    focus_coef = 0


    UnregisterScriptCallback("actor_on_update", slowmo_on_update)
    RegisterScriptCallback("actor_on_update", slowmo_on_end)

    if enable_dodge and run_coef > 0 then
        db.actor:set_actor_run_coef(run_coef)
    end

    pr("slowmo end")
    current_slowmo_event = current_slowmo_event+1
    return true
end

function slowmo_on_end()
    tg = time_global()
	
	if update_trigger == 0 then
       	grok_delay = tg + update_delay
		update_trigger = 1
	end
	
    	
	if (update_trigger == 1 and tg > grok_delay) then
		update_trigger = 0
        if (time_factor >= 1) then
            time_factor = 1
            UnregisterScriptCallback("actor_on_update", slowmo_on_end)
        else
            time_factor = time_factor + 0.01
            get_console():execute("time_factor " .. tostring(time_factor))
        end
    end
end

function slowmo_on_update()
    tg = time_global()
	
	if update_trigger == 0 then
       	grok_delay = tg + update_delay
		update_trigger = 1
	end
	
    	
	if (update_trigger == 1 and tg > grok_delay) then
		update_trigger = 0

        if (not db.actor:alive() or (db.actor.bleeding > 0.2 and enable_dodge)) then
            end_slowmo(current_slowmo_event)
        end

        if enable_dodge then
            if (time_factor <= 0.85) then
                db.actor:set_actor_run_coef(run_coef * 1.5)
            elseif (time_factor <= 0.7 and coef_on == 0) then
                db.actor:set_actor_run_coef(run_coef * 1.3)
                coef_on = 1
            end
        end

        if time_factor > time_speed then
            time_factor = time_factor - 0.008
            get_console():execute("time_factor " .. tostring(time_factor))
            focus_coef = focus_coef + 0.005;
            if enable_screenfx then
                level.set_pp_effector_factor(1993, focus_coef)
                level.set_pp_effector_factor(1995, 1 + focus_coef * 2)
                level.set_pp_effector_factor(1994, 6 + (focus_coef * 10))
                level.set_pp_effector_factor(1996, 100 + (focus_coef * 6))
            end
        end

        if enable_drain then
            local curr_power = db.actor.power
            if curr_power > 0.21 then
                db.actor:change_power(drain_rate_base * drain_rate_coef)
            else
                end_slowmo(current_slowmo_event)
            end
        end
    end
end

function trigger(target)
    if target and lookup:death_log(target) then return true end
    if lookup:setting("bullettime/trigger_chance")*100 < math.random(100) then return true end

    if (slowmo_flag == 0 and (db.actor.bleeding < 0.21 or enable_dodge == false)) then
        if enable_sounds then
            local slowmo_snd_on = sound_object("slow-mo\\slowmo_on")
            slowmo_snd_on:play_at_pos(actor, vector():set(0, 0, 0), 0, sound_object.s2d)
        end
        if enable_screenfx then
            level.add_pp_effector("blink.ppe", 2004, false)
            level.set_pp_effector_factor(2004, 0.1)
            if lookup:setting("bullettime/enable_screenfx_gravi") then
                level.add_pp_effector("gravi.ppe", 1996, true)
            end
            if lookup:setting("bullettime/enable_screenfx_brighten") then
                level.add_pp_effector("brighten.ppe", 1996, true)
            end
            if lookup:setting("bullettime/enable_screenfx_contrast") then
                level.add_pp_effector("contrast.ppe", 1996, true)
            end
            if lookup:setting("bullettime/enable_screenfx_psychic") then
                level.add_pp_effector("psychic.ppe", 1996, true)
            end
        end

        -- dodge start effect
        if enable_dodge then
            run_coef = db.actor:get_actor_run_coef()
            db.actor:set_actor_run_coef(run_coef * 3.5)
        end

        pr("slowmo activate")
        RegisterScriptCallback("actor_on_update", slowmo_on_update)
        UnregisterScriptCallback("actor_on_update", slowmo_on_end)

        CreateTimeEvent("end_slowmo_e", "end_slowmo_" .. current_slowmo_event, lookup:setting("bullettime/length"), end_slowmo, current_slowmo_event)

        slowmo_flag = 1
    elseif slowmo_flag == 1 then
        pr("resetting time event")
        ResetTimeEvent("end_slowmo_e", "end_slowmo_" .. current_slowmo_event, lookup:setting("bullettime/length"))
    end
end

function on_before_hit_after_calcs(s_hit, target, bone_id)
    if not bone_id then return end
    if not s_hit then return end
    if not target then return end
    local shooter = s_hit.draftsman
    local player = db.actor
    if target:id() == player:id() then return end
    if shooter:id() ~= player:id() then return end

    if not player:alive() then
        if (slowmo_flag == 1) then
            end_slowmo(current_slowmo_event)
        end
        return true
    end

    if not lookup:setting("bullettime/enable") then return true end
    if shooter:id() ~= player:id() then return true end

    local npc = target

    if npc.health > 0 then return true end
    if shooter:id() ~= player:id() then return true end


    head_bones = lookup:get_head_bones()
    if (bone_id and head_bones[bone_id]) then
        if lookup:setting("dismemberment/enable") then return true end -- let dismemberment trigger bullet time
        trigger(target)
    end
end


-- clean out on loading
local clear_event_counter = 0
function save_state(m_data)
	if clear_event_counter == 1 then
        m_data.current_slowmo_event = 0
    end
end

function load_state(m_data)
    if m_data.current_slowmo_event then
		clear_event_counter = 1
        m_data.current_slowmo_event = 0
    end
end

function pr(...)
    if not lookup:setting("bullettime/enable_debug") then return end
    printf(...)
end

function main_menu_on_init()
    get_console():execute("time_factor 1")
end
function main_menu_on_quit()
    get_console():execute("time_factor 1")
end

function on_game_start()
    RegisterScriptCallback("actor_on_first_update", load_settings)
    RegisterScriptCallback("on_option_change", load_settings)

    RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)

    RegisterScriptCallback("main_menu_on_init", main_menu_on_init)
	RegisterScriptCallback("main_menu_on_quit", main_menu_on_quit)

    RegisterScriptCallback("on_before_hit_after_calcs", on_before_hit_after_calcs)
    --RegisterScriptCallback("monster_on_death_callback", npc_on_death)
end
