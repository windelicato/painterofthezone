--[[
    Edit of Dismemberment mod to remove bones without spawning objects
    Original Author: bvcx
	https://www.moddb.com/members/bvcx

	Edit by: sunn
    10/10/2024
]]
local geometry_ray = demonized_geometry_ray.geometry_ray

local ltxOutfits = ini_file("plugins\\wepl_hit_effect_outfits.ltx")
local ltxVisuals = ini_file("plugins\\wepl_hit_effect_visuals.ltx")

-- Postpone on next n tick
local nextTick = _G.nextTick or function(f, n)
    n = floor(max(n or 1, 1))
    AddUniqueCall(function()
        if n == 1 then
            return f()
        else
            n = n - 1
            return false
        end
    end)
end

death_log = {}

class "lookup"

function lookup:__init(args)
    self.gbo = nil
    if grok_bo then self.gbo = grok_bo end
    if cxv_artigrok_bo then self.gbo = cxv_artigrok_bo end

    self.gbo_calculations = {}
    self.camera_buffer = {
        safe = {
            position = {},
            direction = {}
        },
        unsafe = {
            position = {},
            direction = {}
        }
    }

    self.creatures_cls = short_range_blood_lookup_tables.creatures_cls
    self.creatures_kind = short_range_blood_lookup_tables.creatures_kind
    self.limb_map = short_range_blood_lookup_tables.limb_map
    self.mesh_map = short_range_blood_lookup_tables.mesh_map
    self.meshes_params = short_range_blood_lookup_tables.meshes_params
    self.bone_groups = short_range_blood_lookup_tables.bone_groups
    self.head_bones = short_range_blood_lookup_tables.head_bones
    self.difficulty_multiplier = short_range_blood_lookup_tables.difficulty_multiplier
    self.integrated_silencer = short_range_blood_lookup_tables.integrated_silencer
    self.grok_headBones = short_range_blood_lookup_tables.grok_headBones
    self.grok_head_bones = short_range_blood_lookup_tables.grok_head_bones
    self.grok_upper_body_group = short_range_blood_lookup_tables.grok_upper_body_group
    self.grok_lower_body_group = short_range_blood_lookup_tables.grok_lower_body_group
end

function lookup:get_creatures_cls()
    return self.creatures_cls
end

function lookup:get_creatures_kind()
    return self.creatures_kind
end

function lookup:get_limb_map()
    return self.limb_map
end

function lookup:get_mesh_map()
    return self.mesh_map
end

function lookup:get_meshes_params()
    return self.meshes_params
end

function lookup:get_bone_groups()
    return self.bone_groups
end

function lookup:get_head_bones()
    return self.head_bones
end

function lookup:setting(key)
    if ui_mcm then
        return ui_mcm.get("blood/" .. key)
    end
end

function lookup:get_armor_type_by_npc(npc)
    if not npc or not IsStalker(npc) then return nil end


    local armorType = nil
    if ltxVisuals then
        local npcVisual = npc:get_visual_name()

        if npcVisual then
            npcVisual = string.lower(npcVisual)
            local npcVisualExt = string.find(npcVisual, ".ogf")

            if npcVisualExt then
                npcVisual = string.sub(npcVisual, 1, npcVisualExt - 1)
            end

            if ltxVisuals:section_exist(npcVisual) then
                armorType = ltxVisuals:line_exist(npcVisual, "armorType") and
                    ltxVisuals:r_string_ex(npcVisual, "armorType") or armorType
            end
        end
    end

    return armorType
end

function lookup:get_helmet_type_by_npc(npc)
    if not npc or not IsStalker(npc) then return nil end

    local helmetType = nil
    if ltxVisuals then
        local npcVisual = npc:get_visual_name()

        if npcVisual then
            npcVisual = string.lower(npcVisual)
            local npcVisualExt = string.find(npcVisual, ".ogf")

            if npcVisualExt then
                npcVisual = string.sub(npcVisual, 1, npcVisualExt - 1)
            end

            if ltxVisuals:section_exist(npcVisual) then
                helmetType = ltxVisuals:line_exist(npcVisual, "helmetType") and
                    ltxVisuals:r_string_ex(npcVisual, "helmetType") or helmetType
            end
        end
    end

    return helmetType
end

function lookup:get_power_by_npc(npc, s_hit, bone_id)
    if not npc then return end
    if self.gbo and s_hit and bone_id then return self:get_gbo_calculation("power", s_hit, npc, bone_id) end
    if s_hit then return s_hit.power end
end

function lookup:get_k_ap_by_npc(npc, s_hit, bone_id)
    if not npc then return end
    if self.gbo and s_hit and bone_id then return self:get_gbo_calculation("k_ap", s_hit, npc, bone_id) end

    -- TODO: Support vanilla Anomaly
    return nil
end

function lookup:get_gbo_calculation(field, s_hit, target, bone_id)
    if not bone_id then return end
    if not s_hit then return end
    if not target then return end
    if not field then return end
    if not grok_bo then return end
    if not self.gbo then return end
    if not self.gbo.custom_bone_ap then return end
    if not self.gbo.custom_bone_dmg then return end

    local grok_key = self:getGrokDefuckulatorKey(s_hit, target, bone_id)
    if not grok_key then return end

    -- check to see if GBO has registered something for this hit
    if self.gbo.custom_bone_dmg[grok_key] then
        if self.gbo[field] and self.gbo[field][grok_key] then
            pr("found field from grok")
            return self.gbo[field][grok_key]
        end
    end

    if not self.gbo_calculations[grok_key] then
        pr("no gbo key yet")
        self:grokDefuckulator(s_hit, target, bone_id)
    end

    if self.gbo_calculations[grok_key] and self.gbo_calculations[grok_key][field] then
        pr("found field from lookup")
        return self.gbo_calculations[grok_key][field]
    end
    return nil
end

function lookup:getGrokDefuckulatorKey(s_hit, target, bone_id)
    if not bone_id then return end
    if not s_hit then return end
    if not target then return end
    if not grok_bo then return end
    if not self.gbo then return end
    if not self.gbo.custom_bone_ap then return end
    if not self.gbo.custom_bone_dmg then return end

    local shooter = s_hit.draftsman
    local player = db.actor
    if target:id() == player:id() then return end
    if shooter:id() ~= player:id() then return end

    local grok_key = target:id() .. "_" .. bone_id
    local custom_bone_ap_scale = self.gbo.custom_bone_ap[grok_key]
    local custom_bone_dmg_mult = self.gbo.custom_bone_dmg[grok_key]

    if not custom_bone_dmg_mult or not custom_bone_ap_scale then
        pr("no shit flying in from grok")

        -- if nothing here, check custom bones
        local found_key = ""
        local custom_bone_name = self.gbo.Bone_IDs[bone_id]
        if not custom_bone_name then
            pr("found custom bone %s", custom_bone_name)
            -- because he uses math.random to generate these bone ids
            for id = 52, 55 do
                local grok_key = target:id() .. "_" .. id
                pr("checking in %s", grok_key)
                if self.gbo.custom_bone_dmg[grok_key] ~= nil then
                    -- keep the lowest in case of multiples found
                    pr("Found a key %s %s", grok_key, self.gbo.custom_bone_dmg[grok_key])
                    if not found_key or (self.gbo.custom_bone_dmg[grok_key] < self.gbo.custom_bone_dmg[found_key]) then
                        found_key = grok_key
                        bone_id = id
                    end
                end
            end
        end

        if self.grok_upper_body_group[bone_id] then
            bone_id = 11
        end

        if self.grok_lower_body_group[bone_id] then
            bone_id = 2
        end

        if self.grok_head_bones[bone_id] then
            bone_id = 15
        end

        grok_key = target:id() .. "_" .. bone_id
        pr("Trying again with custom key %s", grok_key)
        custom_bone_ap_scale = self.gbo.custom_bone_ap[grok_key]
        custom_bone_dmg_mult = self.gbo.custom_bone_dmg[grok_key]
    end

    -- finally if we still can't find it give up
    if not custom_bone_dmg_mult or not custom_bone_ap_scale then
        pr("I give up does %s match grok_bo?", grok_key)
        return
    end
    return grok_key
end

-- this absolutely sucks and i should have just monkey patched grok_bo. at least this wont break on most updates
function lookup:grokDefuckulator(s_hit, target, bone_id)
    if not bone_id then return end
    if not s_hit then return end
    if not target then return end
    if not grok_bo then return end
    if not self.gbo then return end
    if not self.gbo.custom_bone_ap then return end
    if not self.gbo.custom_bone_dmg then return end

    local grok_key = self:getGrokDefuckulatorKey(s_hit, target, bone_id)
    if not grok_key then return end

    local custom_bone_ap_scale = self.gbo.custom_bone_ap[grok_key]
    local custom_bone_dmg_mult = self.gbo.custom_bone_dmg[grok_key]

    -- lets begin shall we?
    local shooter = s_hit.draftsman
    local player = db.actor
    if target:id() == player:id() then return end
    if shooter:id() ~= player:id() then return end

    wpn = level.object_by_id(s_hit.weapon_id)
    sec = wpn:section()

    if sec == "explosive_barrel" or sec == "explosive_barrel_low" or sec == "explosive_tank" or sec == "explosive_grenade" or sec == "explosive_hide" or sec == "explosive_particle" or sec == "explosive_fuelcan"
        or sec == "explosive_mobiltank" or sec == "explosive_dinamit" then
        return
    end

    if IsGrenade(wpn) then return end
    if wpn == nil then return end

    local wpn_id = wpn:id()
    local ammo_type_number = wpn:get_ammo_type()
    local ammo_list = utils_item.get_ammo(sec, wpn_id)
    local ammo_section = ammo_list[ammo_type_number + 1]
    local wpn_hit_power = ui_wpn_params.read_float(sec, "", "hit_power")

    if wpn and wpn:weapon_is_silencer() then
        silencer_boost = 1.07
    else
        silencer_boost = 1
    end

    if sec and self.integrated_silencer[sec] then
        silencer_boost = 1.07
    end

    if string.find(sec, "wpn_toz106") then
        wpn_hit_power = 0.8
    end
    local k_ap = ini_sys:r_float_ex(ammo_section, "k_ap") * 10 or 0
    local k_hit = ini_sys:r_float_ex(ammo_section, "k_hit") or 1
    local air_res = ini_sys:r_float_ex(ammo_section, "k_air_resistance") or 0.05
    local wm_size = ini_sys:r_float_ex(ammo_section, "wm_size") or 0.05
    local target_pos = target:position()
    local shooter_pos = shooter:position()
    local dist = target_pos:distance_to(shooter_pos)

    local gameplay = alife_storage_manager.get_state().diff_game
    if not (type(gameplay) == "table") then -- for old saves
        alife_storage_manager.get_state().diff_game = {}
        alife_storage_manager.get_state().diff_game["type"] = game_num
        gameplay = alife_storage_manager.get_state().diff_game
    end

    local game_num = gameplay["type"] or 1

    ammo_mult = 1.00

    if ammo_section == "ammo_7.62x25_p" or ammo_section == "ammo_7.62x25_p_bad" then
        ammo_mult = 1.75
    end


    -- we ignore barrel_condition_corrected, sin resistance, sniper_bad_bone_shit_reduce because fuck this
    local power = wpn_hit_power / (1 + dist / 200 * (air_res * 0.5 / (1 - air_res + 0.1))) * k_hit * custom_bone_dmg_mult *
        custom_bone_ap_scale * 1.1 * self.difficulty_multiplier[game_num] * ammo_mult * silencer_boost
    pr("-----------------------GROK DEFUCKULATOR v3.FUCKKKKt-------------------------")
    pr("-----------------------------grok identifier: %s-----------------------------", grok_key)
    pr("------bone dmg---------------------%s----------------------------------------", custom_bone_dmg_mult)
    pr("------bone ap scale---------------------%s----------------------------------------", custom_bone_ap_scale)
    pr("------s_hit power---------------------%s----------------------------------------", s_hit.power)
    pr("------defuckulator power---------------------%s----------------------------------------", power)

    -- save these calculations for later
    self.gbo_calculations[grok_key] = {
        wpn_hit_power = wpn_hit_power,
        k_ap = k_ap,
        k_hit = k_hit,
        air_res = air_res,
        dist = dist,
        power = power
    }
    return power
end

function lookup:get_safe_camera_positions(target, bone_id, pos, radius)
    return self:camera_safety_fetch("safe", "position", target, bone_id, pos, radius)
end

function lookup:get_safe_camera_directions(target, bone_id, pos, radius)
    return self:camera_safety_fetch("safe", "direction", target, bone_id, pos, radius)
end

function lookup:get_unsafe_camera_directions(target, bone_id, pos, radius)
    return self:camera_safety_fetch("unsafe", "direction", target, bone_id, pos, radius)
end

function lookup:get_unsafe_camera_positions(target, bone_id, pos, radius)
    return self:camera_safety_fetch("unsafe", "position", target, bone_id, pos, radius)
end

function lookup:camera_safety_fetch(safety, type, target, bone_id, pos, radius)
    if not safety then return end
    if not type then return end
    if not bone_id then return end
    if not target then return end
    if not pos then return end
    if not radius then return end
    if not self.camera_buffer then return end
    if not self.camera_buffer[safety] then return end
    if not self.camera_buffer[safety][type] then return end

    local key = target:id() .. '-' .. bone_id .. '-' .. radius
    if self.camera_buffer[safety][type][key] then
        pr("CAMERA FOUND FROM CACHE")
        return self.camera_buffer[safety][type][key]
    else
        return self:camera_checker(target, bone_id, pos, radius, key, safety, type)
    end
end

function lookup:camera_checker(target, bone_id, pos, radius, key, safety, type)
    if not bone_id then return end
    if not target then return end
    if not pos then return end
    if not radius then return end
    if not key then return end

    -- for now we just rotate around the circle. eventually raytrace from each to look for collisions
    local safe_cam_positions = {}
    local safe_cam_directions = {}
    local unsafe_cam_directions = {}
    local unsafe_cam_positions = {}
    local real_camera_distance = nil
    local points = 25
    local cycle = 0
    local b = 0
    local x = 0
    local y = 1
    local z = 0

    -- debug stuff
    local part_outside = {}

    for i = 1, points do
        b = i / points
        local c = cycle + (360 * b) -- to lessen the computation cost
        x = tonumber(radius) * math.sin(math.rad(c))
        z = tonumber(radius) * math.cos(math.rad(c))
        cycle = cycle + 0.5

        if cycle >= 360 then
            cycle = 0
        end

        local cycle_cam_pos = vector():set(pos.x + x, pos.y + y, pos.z + z)
        local cycle_cam_dir = vec_sub(vector():set(pos), vector():set(cycle_cam_pos))

        if not real_camera_distance then
            real_camera_distance = math.sqrt((cycle_cam_pos.x - pos.x) ^ 2 + (cycle_cam_pos.y - pos.y) ^ 2 +
                (cycle_cam_pos.z - pos.z) ^ 2)
            pr("real camera distance: %s", real_camera_distance)
        end

        local ray = geometry_ray({
            ray_range = real_camera_distance,
            flags = 2,
            ignore_object = target,
            visualize = self:setting("general/enable_debug")
        })
        local reverse_cycle_cam_dir = vector():set(-1 * cycle_cam_dir.x, -1 * cycle_cam_dir.y, -1 * cycle_cam_dir.z)
            :normalize()
        local camera_ray = ray:get(pos, reverse_cycle_cam_dir)
        if not camera_ray.success then
            table.insert(safe_cam_positions, cycle_cam_pos)
            table.insert(safe_cam_directions, cycle_cam_dir)
            if self:setting("general/enable_debug") then
                if part_outside[i] ~= nil then
                    part_outside[i]:stop()
                end
                part_outside[i] = particles_object("_samples_particles_\\flash_light")
                part_outside[i]:play_at_pos(cycle_cam_pos)
            end
        else
            table.insert(unsafe_cam_directions, reverse_cycle_cam_dir)
            table.insert(unsafe_cam_positions, cycle_cam_pos)
        end
    end
    if #unsafe_cam_directions then
        self.camera_buffer.unsafe.direction[key] = unsafe_cam_directions
    end
    if #unsafe_cam_positions then
        self.camera_buffer.unsafe.position[key] = unsafe_cam_positions
    end
    if #safe_cam_positions then
        self.camera_buffer.safe.position[key] = safe_cam_positions
    end
    if #safe_cam_directions then
        self.camera_buffer.safe.direction[key] = safe_cam_directions
    end
    if type and safety then
        return self.camera_buffer[safety][type][key]
    end
end

function lookup:death_log(target)
    return death_log[target:id()] ~= nil and death_log[target:id()]
end

function death_log_callback(s_hit, target, bone_id)
    if not bone_id then return end
    if not s_hit then return end
    if not target then return end
    local player = db.actor
    if target:id() == player:id() then return end


    if target and target.health <= 0 or not target:alive() then
        if not death_log[target:id()] then
            nextTick(function()
                pr("death logging %s", target:id())
                death_log[target:id()] = time_global()
                return true
            end, 200)
        end
    end
end

-- clean out on loading
local clear_death_log = 0
function save_state(m_data)
    if clear_death_log == 1 then
        m_data.death_log = {}
    end
end

function load_state(m_data)
    if m_data.death_log then
        clear_death_log = 1
        m_data.death_log = {}
    end
end

function pr(...)
    if not lookup:setting("general/enable_debug") then return end
    printf(...)
end

function on_game_start()
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("on_before_hit_after_calcs", death_log_callback)
end
