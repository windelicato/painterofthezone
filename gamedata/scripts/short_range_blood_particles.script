--[[
    Extra particle functions for short range blood decals
    Author: sunn

    10/07/2024
]]

local buffer = {}
local buffer_index = 1
local trigger_delay = 10
local trigger_timer = 0
local finger_trigger_timer = 0

local hit_power_sum = {}

local lookup = short_range_blood_lookup.lookup()
local head_bones = lookup:get_head_bones()
local fingers = {
    [1] = "srbd_hit_finger_up",
    [2] = "srbd_hit_finger_out",
    [3] = "srbd_hit_finger_out_up"
}

function play_particle(particle_name, pos, dir, ttl, limit)
    if not particle_name then return end
    if not pos then return end
    if buffer_index > lookup:setting("particles/buffer_max_size") then buffer_index = 1 end

    ttl = ttl or 10  --10s
    ttl = ttl * 1000 --ms
    limit = limit or false
    tg = time_global()


    for i = 1, lookup:setting("particles/buffer_max_size") do
        if buffer[i] ~= nil then
            if buffer[i].object:playing() and tg > buffer[i].timestamp + ttl then
                pr("particle over ttl killed: ttl %s timestamp %s tg %s", ttl, buffer[i].timestamp, tg)
                buffer[i].object:stop()
            end
            if limit and buffer[i].name == particle_name and buffer[i].object:playing() then
                pr("existing identical particle playing")
                return
            end
        end
    end

    if buffer[buffer_index] ~= nil then
        if buffer[buffer_index].object:playing() then
            buffer[buffer_index].object:stop()
        end
    end
    if buffer[buffer_index] == nil then buffer[buffer_index] = {} end

    buffer[buffer_index].object = particles_object(particle_name)
    buffer[buffer_index].timestamp = tg
    buffer[buffer_index].name = particle_name

    if buffer[buffer_index].object and not buffer[buffer_index].object:playing() then
        pr("playing particle %s in particle buffer position %s", particle_name, buffer_index)

        if dir then buffer[buffer_index].object:set_direction(dir) end
        buffer[buffer_index].object:play_at_pos(pos)
        --pr("playing particle %s in position %s %s %s", particle_name, pos.x, pos.y, pos.z)
        --pr("playing particle %s in direction %s %s %s", particle_name, dir.x, dir.y, dir.z)
        buffer_index = buffer_index + 1
    end
end

function play_dismemberment_particle(s_hit, target, bone_id)
    if target and lookup:death_log(target) then return true end
    local bone_name = bone_id and target:bone_name(bone_id)
    local pos = target:bone_position(bone_name)
    local dir = s_hit.direction
    --    dir = vector():set(dir):normalize()

    local helmetType = lookup:get_helmet_type_by_npc(target)

    if helmetType == "helmet" then
        play_particle("srbd\\headshot\\debris_armor", pos, dir)
    elseif helmetType == "glass" then
        play_particle("srbd\\headshot\\debris_glass", pos, dir)
    else
        play_particle("srbd\\headshot\\debris_skin", pos, dir)
    end

    play_particle("srbd\\hit\\pg_00", pos, dir)
    play_particle("srbd\\wound\\pg_00", pos, dir)
    play_particle("srbd\\headshot\\srbd_head_dust", pos, dir)

    local particles = { "0", "1", "2" } -- 3
    local particle_path = "srbd\\headshot\\dismember_0"
    local picked_particle = particle_path .. particles[math.random(1, #particles)]
    play_particle(picked_particle, pos, dir)

    short_range_blood_wm.draw_dismemberment_wm(target, bone_id)
end

function play_headshot_particle(s_hit, target, bone_id)
    -- grok_bo.headshot_feedback_particle = "srbd\\srbd_hit_flesh_headshot"
    -- grok_bo.headshot_feedback_enable = false

    local picked_particle = "srbd\\srbd_hit_flesh_headshot"

    if target and lookup:setting("particles/enable_armor_feedback") and not lookup:death_log(target) then
        local helmetType = lookup:get_helmet_type_by_npc(target)
        if helmetType == "helmet" then picked_particle = "srbd\\headshot\\srbd_headshot_armor" end
        if helmetType == "glass" then picked_particle = "srbd\\headshot\\srbd_headshot_glass" end
    end

    local bone_name = bone_id and target:bone_name(bone_id)
    local pos = target:bone_position(bone_name)
    local dir = s_hit.direction
    --    dir = vector():set(dir):normalize()

    play_particle(picked_particle, pos, dir, lookup:setting("particles/ttl"), lookup:setting("particles/limit"))
end

function play_hit_particle(s_hit, target, bone_id)
    local particles = { "0", "1", "2", "2a" } -- 4
    local particle_path = "srbd\\srbd_hit_flesh_0"
    local picked_particle = particle_path .. particles[math.random(1, 4)]

    if target and lookup:setting("particles/enable_armor_feedback") and not lookup:death_log(target) then
        local armorType = lookup:get_armor_type_by_npc(target)
        if armorType == "medium" then
            local armor_particles = { "0", "1", "2" } -- 3
            picked_particle = "srbd\\hit\\body_impact_armor_0" .. armor_particles[math.random(1, 3)]
        end
        if armorType == "exo" then
            local exo_particles = { "0", "1", "2" } -- 3
            picked_particle = "srbd\\hit\\body_impact_sparks_0" .. exo_particles[math.random(1, 3)]
        end
    end

    local bone_name = bone_id and target:bone_name(bone_id)
    local pos = target:bone_position(bone_name)
    local dir = s_hit.direction
    --    dir = vector():set(dir):normalize()

    play_particle(picked_particle, pos, dir, lookup:setting("particles/ttl"), lookup:setting("particles/limit"))
end

function play_summed_particle(hpsk)
    tg = time_global()
    if tg > finger_trigger_timer + trigger_delay then
        finger_trigger_timer = tg
        if hit_power_sum and hit_power_sum[hpsk] then
            if not hit_power_sum[hpsk]["total"] then return true end
            if not hit_power_sum[hpsk]["hit_fraction"] then return true end
            if not hit_power_sum[hpsk]["pos"] then return true end
            if not hit_power_sum[hpsk]["dir"] then return true end
            local hit_power = hit_power_sum[hpsk]["total"]
            local pos = hit_power_sum[hpsk]["pos"]
            local dir = hit_power_sum[hpsk]["dir"]
            local hit_fraction = hit_power_sum[hpsk]["hit_fraction"]

            local fraction_blood = math.floor(20 * hit_fraction + 0.5)
            if fraction_blood > 10 then fraction_blood = 10 end
            if fraction_blood < 1 then fraction_blood = 1 end
            local fraction_armor = 10 - fraction_blood
            pr("Hit fraction %s", fraction_blood)
            pr("Hit fraction armor %s", fraction_armor)

            local fraction_power = math.floor(5 * hit_power)
            if fraction_power > 10 then fraction_power = 10 end
            if fraction_power < 1 then fraction_power = 1 end
            pr("Power fraction %s", hit_power)
            pr("Power fraction %s", fraction_power)

            local size_min = lookup:setting("particles/fingers_size_min")
            local size_max = lookup:setting("particles/fingers_size_max")

            if fraction_power <= size_min then fraction_power = size_min end
            if fraction_power >= size_max then fraction_power = size_max end

            local picked_particle = fingers[lookup:setting("particles/fingers_option")]
            if fraction_blood <= 10 and fraction_power <= 10 and fraction_blood >= 1 and fraction_power >= 1 then
                local blood_part = "srbd\\fingers\\fractional\\" ..
                    fraction_power .. "\\" .. fraction_blood .. "\\" .. picked_particle
                play_particle(blood_part, pos, dir, lookup:setting("particles/ttl"),
                    lookup:setting("particles/limit"))
            end
            if fraction_armor <= 11 and fraction_power <= 11 and fraction_armor >= 1 and fraction_power >= 1 then
                local armor_part = "srbd\\fingers\\fractional\\" ..
                    fraction_power .. "\\" .. fraction_armor .. "\\" .. picked_particle .. "_armor"
                play_particle(armor_part, pos, dir, lookup:setting("particles/ttl"),
                    lookup:setting("particles/limit"))
            end
            --for k in pairs (hit_power_sum[hpsk]) do
            --    hit_power_sum[hpsk][k] = nil
            --end
            --hit_power_sum[hpsk] = nil
        end
    end
    hit_power_sum[hpsk] = {}
    return true
end

function play_fingers_particle(s_hit, target, bone_id)
    if target and lookup:death_log(target) then return end

    local picked_particle = fingers[lookup:setting("particles/fingers_option")]
    local bone_name = bone_id and target:bone_name(bone_id)
    local pos = target:bone_position(bone_name)
    local dir = s_hit.direction

    if lookup:setting("particles/enable_armor_feedback") then
        local hit_fraction = 9
        local hit_power = lookup:get_power_by_npc(target, s_hit, bone_id)
        local armorType = lookup:get_armor_type_by_npc(target)
        if armorType == "exo" or armorType == "medium" then
            hit_fraction = lookup:get_k_ap_by_npc(target, s_hit, bone_id)
        end
        if hit_fraction and hit_power then
            local hit_power_sum_key = target:id()
            if hit_power_sum and hit_power_sum[hit_power_sum_key] and hit_power_sum[hit_power_sum_key]["total"] then
                hit_power_sum[hit_power_sum_key]["total"] = hit_power_sum[hit_power_sum_key]["total"] + hit_power
                pr("new total: %s", hit_power_sum[hit_power_sum_key]["total"])
            else
                hit_power_sum[hit_power_sum_key] = {}
                hit_power_sum[hit_power_sum_key]["total"] = hit_power
                CreateTimeEvent("play_summed_particle_", "play_summed_particle_" .. hit_power_sum_key, 0.01,
                    play_summed_particle, hit_power_sum_key)
            end
            hit_power_sum[hit_power_sum_key]["hit_fraction"] = hit_fraction
            hit_power_sum[hit_power_sum_key]["pos"] = pos
            hit_power_sum[hit_power_sum_key]["dir"] = dir

            return
        end

        picked_particle = picked_particle .. "_armor"
    end
    tg = time_global()
    if tg > finger_trigger_timer + trigger_delay then
        finger_trigger_timer = tg
        play_particle("srbd\\fingers\\" .. picked_particle, pos, dir, lookup:setting("particles/ttl"),
            lookup:setting("particles/limit"))
    else
        pr("waiting to draw")
    end
end

function on_before_hit_after_calcs(s_hit, target, bone_id)
    if not lookup:setting("particles/enable") then return true end
    if not bone_id then return true end
    if not s_hit then return true end
    if not target then return true end
    local shooter = s_hit.draftsman
    local player = db.actor
    if target:id() == player:id() then return true end
    if shooter:id() ~= player:id() then return true end
    if target:bone_name(bone_id) == "" then return true end -- surrender

    -- keep track of what we've played
    local playlist = {}

    -- dismemberment particle
    if lookup:setting("particles/dismemberment_enable") then
        if not lookup:setting("dismemberment/enable") and (bone_id and head_bones[bone_id]) and target.health <= 0 then
            local hit_threshold = lookup:setting("dismemberment/threshold_stalker")
            local hit_power = s_hit.power
            if grok_bo ~= nil then
                hit_power = lookup:get_gbo_calculation("power", s_hit, target, bone_id)
            end
            if cxv_artigrok_bo ~= nil then
                hit_power = lookup:get_gbo_calculation("power", s_hit, target, bone_id)
            end
            if (not hit_power) or (hit_power < hit_threshold) then return end

            play_dismemberment_particle(s_hit, target, bone_id)
            table.insert(playlist, "dismemberment")
        end
    end

    tg = time_global()
    if tg > trigger_timer + trigger_delay then
        trigger_timer = tg
        -- headshot particle
        if lookup:setting("particles/headshot_enable") then
            if (bone_id and head_bones[bone_id]) then
                if not lookup:setting("particles/headshot_exclusive") or not #playlist then
                    play_headshot_particle(s_hit, target, bone_id)
                    table.insert(playlist, "headshot")
                end
            end
        end

        -- hit particle
        if lookup:setting("particles/hit_enable") then
            if not lookup:setting("particles/hit_exclusive") or not #playlist then
                play_hit_particle(s_hit, target, bone_id)
                table.insert(playlist, "hit")
            end
        end
    end

    -- hit fingers
    if lookup:setting("particles/fingers_enable") then
        local play = true
        if #playlist then
            for k, v in pairs(playlist) do
                if v == "dismemberment" then
                    play = false
                    pr("playlist item: %s", v)
                end
                pr("playlist item: %s : %s", k, v)
            end
        end
        if play then
            play_fingers_particle(s_hit, target, bone_id)
            pr("playlist count: %s", #playlist)
            table.insert(playlist, "fingers")
        end
    end
end

-- debug stuff
local test_particles = {
    "srbd\\headshot\\srbd_head_dust"
}
local test_particle_index = 1
function on_weapon_fired(obj, wpn, ammo_elapsed, grenade_elapsed, ammo_type, grenade_type)
    if not lookup:setting("particles/enable_debug") then return end
    local distance = lookup:setting("particles/debug_distance")
    local actor_pos = db.actor:position()
    local actor_dir = device().cam_dir
    local cam_pos = device().cam_pos

    local dir = actor_dir
    local pos = actor_pos

    pos.x = pos.x + actor_dir.x * distance
    pos.y = cam_pos.y + actor_dir.y * distance
    pos.z = pos.z + actor_dir.z * distance

    pr("pos %s %s %s", pos.x, pos.y, pos.z)
    pr("dir %s %s %s", dir.x, dir.y, dir.z)

    if test_particle_index > #test_particles then
        test_particle_index = 1
    end
    --play_particle(test_particles[test_particle_index], pos, dir)
    test_particle_index = test_particle_index + 1
end

-- clean out on loading
local clear_buffer = 0
local clear_hit_power_sum = 0
local clear_buffer_index = 0
function save_state(m_data)
    if clear_buffer == 1 then
        m_data.buffer = {}
    end
    if clear_hit_power_sum == 1 then
        m_data.hit_power_sum = {}
    end
    if clear_buffer_index == 1 then
        m_data.buffer_index = 1
    end
end

function load_state(m_data)
    if m_data.buffer then
        clear_buffer = 1
        m_data.buffer = {}
    end
    if m_data.hit_power_sum then
        clear_hit_power_sum = 1
        m_data.hit_power_sum = {}
    end
    if m_data.buffer_index then
        clear_buffer_index = 1
        m_data.buffer_index = 1
    end
end

function pr(...)
    if not lookup:setting("particles/enable_debug") then return end
    printf(...)
end

function on_game_start()
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)

    RegisterScriptCallback("on_before_hit_after_calcs", on_before_hit_after_calcs)
    RegisterScriptCallback("actor_on_weapon_fired", on_weapon_fired)
    --RegisterScriptCallback("monster_on_death_callback", npc_on_death)
end
