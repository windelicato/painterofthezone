--[[
    Edit of Long Range Blood Decals mod to display even more blood wallmarks
    Original Author: bvcx
	https://www.moddb.com/members/bvcx

	Original Upload: INNIES
	https://www.moddb.com/mods/stalker-anomaly/addons/long-range-blood-decals

	Blood pool decals also by bvcx
	https://www.moddb.com/members/bvcx

	Edit by: sunn
    10/01/2024
]]
-- stalkers and fire_wound only for now
local hit_types = {
	--	[hit.strike]        = "strike",
	--	[hit.wound]         = "wound",
	[hit.fire_wound] = "fire_wound",
	--	[hit.explosion] 		= "explosion",
}

local geometry_ray = demonized_geometry_ray.geometry_ray
local engine_wallmark_range = 5

local lookup = short_range_blood_lookup.lookup()

local draw_time = time_global()
local dismemb_draw_time = time_global()
----------------

function shuffle(tbl)
	for i = #tbl, 2, -1 do
		local j = math.random(i)
		tbl[i], tbl[j] = tbl[j], tbl[i]
	end
	return tbl
end

function draw_dismemberment_wm(target, bone_id)
	pr("starting dismemb wallmark")
	local update_delay = lookup:setting("wm/delay") * 1000
	local tg = time_global()

	if (tg > dismemb_draw_time + update_delay) then
		dismemb_draw_time = tg
		pr("starting delay wallmark")
		if not lookup:setting("wm/enable_dismemberment") then return end
		if not target then return end
		if not bone_id then return end
		local bone_name = bone_id and target:bone_name(bone_id)
		if not bone_name then return end
		local pos = target:bone_position(bone_name)
		if not pos then return end

		local radius = lookup:setting("wm/dismemberment_distance")

		pr("getting cam dist")
		local unsafe_cam_directions = lookup:get_unsafe_camera_directions(target, bone_id, pos, radius)
		if not unsafe_cam_directions or #unsafe_cam_directions == 0 then return end

		local wallmark_limit = lookup:setting("wm/dismemberment_count")
		local wallmark_count = #unsafe_cam_directions
		pr("possible walls: %s", wallmark_count)
		if wallmark_count > 0 then
			if wallmark_count > wallmark_limit then wallmark_count = wallmark_limit end
			unsafe_cam_directions = shuffle(unsafe_cam_directions)
			for i = 1, wallmark_count do
				local picked_wm = "new_wm_blood_drip_" .. math.random(1, 6)
				local wm_size = 0.3 + 0.0001 * math.random(1, 4000)
				if i == 1 then
					picked_wm = "new_wm_blood_wound_" .. math.random(1, 3)
					wm_size = 0.1 + 0.0001 * math.random(1, 4000)
				end
				if i == 2 then
					wm_size = 0.5 + 0.0001 * math.random(1, 10000)
					picked_wm = "new_wm_blood_splash_" .. math.random(1, 12)
				end

				local direction = unsafe_cam_directions[i]
				local vec_down = vector():set(0, -0.001 * math.random(1, 1000), 0)
				direction = vec_add(vec_down, direction):normalize()

				pr("checking normal")
				local wall, normal, surface_position = get_surface_normal(pos, direction, radius, target)
				if wall then
					local wallmark_start = vector():set(surface_position.x + normal.x, surface_position.y + normal.y,
						surface_position.z + normal.z)
					local wallmark_dir = vector():set(-1 * normal.x, -1 * normal.y, -1 * normal.z)

					pr("found a wall and placing %s in %s", picked_wm, direction)

					wallmarks_manager():place(wallmark_dir, wallmark_start, radius, wm_size, picked_wm, target,
						lookup:setting("wm/lifetime"), false)

					local dust_part = "srbd\\headshot\\srbd_head_dust"
					short_range_blood_particles.play_particle(dust_part, surface_position, normal)
					pr("dismember wm placed")
				end
			end
		end
	end
end

function get_surface_normal(start_pos, start_direction, range, ignore)
	local ray = geometry_ray({
		ray_range = range,
		flags = 2,
		ignore_object = ignore,
		visualize = lookup:setting("wm/enable_debug")
	})
	local res = ray:get(start_pos, start_direction)
	if res.success then
		local normal = demonized_geometry_ray.get_surface_normal(
			start_pos,
			start_direction,
			{
				flags = 2,
				visualize = lookup:setting("wm/enable_debug")
			},
			nil,
			res
		)
		if not normal then return end

		local angle = math.abs(math.deg(math.asin(normal.y)))
		return angle < 30, normal, res.position
	end
end

function draw_pool_wm(s_hit, target, bone_id)
	if target:alive() then return end

	pr("~drawing pool wm")
	local wm_dir = vector():set(0, -1, 0)
	local target_pos = target:position()
	local wm_pos = vector():set(target_pos.x, target_pos.y + 2, target_pos.z)
	if not wm_pos then return end;

	local picked_wm = "blood_pool_texture_" .. math.random(1, 24)
	local wm_size = lookup:setting("wm/size_pool")

	pr("- draw our wm || size: %s || sec: %s", wm_size, picked_wm)

	wallmarks_manager():place(wm_dir, wm_pos, 10, wm_size, picked_wm, target, lookup:setting("wm/lifetime"), false)
end

function draw_floor_wm(s_hit, target, bone_id)
	if lookup:setting("wm/enable_pool") and not target:alive() then return end

	local shooter = s_hit.draftsman

	local h_type = hit_types[s_hit.type]
	if not h_type then return end

	-- draftsman is alive stalker
	pr("draft sec: %s", shooter and shooter:section())
	if not (shooter and shooter.alive and shooter:alive() and IsStalker(shooter)) then return end

	-- draftsman weapon
	local wpn = shooter:active_item()
	if not (wpn and IsWeapon(wpn)) then return end
	if IsMelee(wpn) then return end

	-- get ammo wm_size
	local ammo_list = utils_item.get_ammo(nil, wpn:id())
	local ammo_idx = wpn:get_ammo_type() + 1
	local ammo_sec = ammo_list and ammo_idx and ammo_list[ammo_idx]
	local wm_size = ammo_sec and ini_sys:r_float_ex(ammo_sec, "wm_size")
	wm_size = wm_size and tonumber(wm_size) or 0.1
	wm_size = lookup:setting("wm/size") * wm_size

	if lookup:setting("wm/enable_static_size") then
		wm_size = lookup:setting("wm/size")
	end

	-- wm dir
	local wpn_pos = vector():set(wpn:bone_position("wpn_body"))
	local bone_name = bone_id and target:bone_name(bone_id)
	local pos_to = bone_name and vector():set(target:bone_position(bone_name))
	local wm_dir = wpn_pos and pos_to and vec_sub(vector():set(pos_to), vector():set(wpn_pos)):normalize()

	local gravity = lookup:setting("wm/gravity")
	local vec_down = vector():set(0, gravity * -1, 0)
	local vec_dir = vec_add(vector():set(vec_down), vector():set(wm_dir)):normalize()
	local vec_pos = pos_to

	-- wm to draw
	local wms = {
		normal = {
			name = "new_wm_blood_normal_",
			count = 9
		},
		drip = {
			name = "new_wm_blood_drip_",
			count = 6
		},
		splash = {
			name = "new_wm_blood_splash_",
			count = 12
		},
		enabled = {},
		total = 0
	}

	if lookup:setting("wm/enable_normal") then
		for i = 1, wms.normal.count do
			table.insert(wms.enabled, wms.normal.name .. i)
		end
		wms.total = wms.total + wms.normal.count
	end

	if lookup:setting("wm/enable_drip") then
		for i = 1, wms.drip.count do
			table.insert(wms.enabled, wms.drip.name .. i)
		end
		wms.total = wms.total + wms.drip.count
	end

	if lookup:setting("wm/enable_splash") then
		for i = 1, wms.splash.count do
			table.insert(wms.enabled, wms.splash.name .. i)
		end
		wms.total = wms.total + wms.splash.count
	end
	local picked_wm = wms.enabled[math.random(1, wms.total)]

	-- check for engine wallmark
	local rotation = 0
	pr("cam rot: %s", device().cam_dir:getH())
	rotation = ((device().cam_dir:getH() / math.pi) * -180) + 90
	pr("rotation: %s", rotation)

	if lookup:setting("wm/enable_avoid_wallmark") then
		local ray = geometry_ray({
			ray_range = engine_wallmark_range,
			flags = 2,
			ignore_object = target
		})
		local engine_wallmark = ray:get(vec_pos, wm_dir)
		if engine_wallmark.success then
			pr("Engine wallmark. Not placing floor mark")
			return
		end
	end

	-- Play behind hit not right above it.
	local nz = vec_dir.z
	vec_pos = vector():set(vec_pos.x, vec_pos.y, vec_pos.z + 1.5 * nz)


	pr("bone_hit: %s", bone_name)
	pr("- draw our wm || size: %s || sec: %s", wm_size, picked_wm)
	pr("- draw our wm || pos: %s || dir: %s", vec_pos, vec_dir)
	pr("placing wallmark")

	wallmarks_manager():place(vec_dir, vec_pos, 5, wm_size, picked_wm, target, lookup:setting("wm/lifetime"), rotation)
end

function on_before_hit_after_calcs(s_hit, target, bone_id)
	if not bone_id then return end
	if not s_hit then return end
	local shooter = s_hit.draftsman
	local player = db.actor
	if target:id() == player:id() then return end
	if shooter:id() ~= player:id() then return end
	if target:bone_name(bone_id) == "" then return true end --surrender

	local update_delay = lookup:setting("wm/delay") * 1000
	local tg = time_global()

	if (tg > draw_time + update_delay) then
		draw_time = tg

		if lookup:setting("wm/enable_floor") then
			draw_floor_wm(s_hit, target, bone_id)
		end

		if lookup:setting("wm/enable_pool") then
			draw_pool_wm(s_hit, target, bone_id)
		end
	else
		pr("Not drawing for another %s", draw_time + update_delay - tg)
	end
end

function on_weapon_fired(obj, wpn, ammo_elapsed, grenade_elapsed, ammo_type, grenade_type)
	if not lookup:setting("wm/enable_debug") then return end
	local actor_pos = db.actor:position()
	local actor_dir = device().cam_dir
	local cam_pos = device().cam_pos
	local wm_dir = actor_dir
	wm_dir = vector():set(actor_dir.x, actor_dir.y, actor_dir.z):normalize()
	local pos = actor_pos

	local wpn = db.actor:active_item()
	if not (wpn and IsWeapon(wpn)) then return end
	local wpn_pos = vector():set(wpn:bone_position("wpn_body"))

	local wm_size = lookup:setting("wm/size")
	--local picked_wm = "new_wm_blood_wound_"..math.random(1,3)
	local picked_wm = "new_wm_blood_wound_1"
	--wallmarks_manager():place(wm_dir, wpn_pos, 20, wm_size, picked_wm, db.actor, lookup:setting("wm/lifetime"))
end

function pr(...)
	if not lookup:setting("wm/enable_debug") then return end
	printf(...)
end

function on_game_start()
	RegisterScriptCallback("actor_on_weapon_fired", on_weapon_fired)
	RegisterScriptCallback("on_before_hit_after_calcs", on_before_hit_after_calcs)
end
